{"version":3,"sources":["components/navbar.jsx","components/counter.jsx","components/counters.jsx","App.js","registerServiceWorker.js","index.js"],"names":["NavBar","_ref","totalCounters","React","createElement","className","style","fontSize","href","src","height","alt","Counter","_React$Component","props","_this","_classCallCheck","this","_possibleConstructorReturn","_getPrototypeOf","call","console","log","_inherits","_createClass","key","value","prevProps","prevState","counter","concat","_this$props","onIncrement","onDecrement","onDelete","children","getBadgeClasses","formatCount","type","onClick","disabled","id","classes","Component","Counters","counters","onReset","onNovoContador","map","App","ncounters","handleIncrement","_toConsumableArray","state","index","indexOf","_objectSpread","setState","handleDecrement","handleReset","c","handleDelete","counterId","filter","handleNewCounter","maxId","push","Array","from","length","_","Fragment","role","document","getElementsByTagName","classList","add","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","get","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.b9cd16c5.chunk.js","sourcesContent":["import React from 'react';\n \nconst NavBar = ({ totalCounters }) => {\n  return (\n      <nav className=\"navbar navbar-dark bg-dark\">\n          <div style={{ fontSize: \"32px\" }}>\n              {\" Total \"}\n              <span className=\"badge rounded-pill bg-secondary\">\n                  {totalCounters}\n              </span>\n          </div>\n          <a href=\"https://react.dev\">\n              <img\n                  src=\"favicon.ico\"\n                  style={{ height: \"48px\" }}\n                  alt=\"logo\"\n              />\n          </a>\n          <a href=\"https://getbootstrap.com\">\n              <img\n                  src=\"https://getbootstrap.com/docs/5.3/assets/brand/bootstrap-logo-shadow.png\"\n                  style={{ height: \"48px\" }}\n                  alt=\"logo\"\n              />\n          </a>\n      </nav>\n  );\n};\n\n\nexport default NavBar;","import React from 'react';\n\nclass Counter extends React.Component {\n\n  constructor(props) {\n      super(props);\n      console.log(\"Counter constructor: props\", props);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n      if (prevProps.counter.value !== this.props.counter.value) {\n          // Ajax call and get new data from the server\n          console.log(\"componentDidUpdate: Ajax has been called\");\n          console.log(`prevProps: ${prevProps.counter.value}`);\n          console.log(`Props: ${this.props.counter.value}`);\n      }\n  }\n\n  componentWillUnmount() {\n      console.log(\"Counter - Unmount\");\n  }\n\n  render() {\n      console.log(\"Counter: props\", this.props);\n      const { counter, onIncrement, onDecrement, onDelete } = this.props;\n      return (\n          <div className=\"row\">\n              {/* jump line after counterid: 2) */}\n              <div className=\"w-100\">{this.props.children}</div>\n\n              {/* break point medium (720px) */}\n              {/* .col-xs-* classes, create a basic grid system that starts out stacked on */}\n              {/* extra small sizes and becomes horizontal at the small breakpoint (sm). */}\n              <div className=\"col-sm-1\">\n                  <span className={this.getBadgeClasses()}>\n                      {this.formatCount()}\n                  </span>\n              </div>\n              <div className=\"col\">\n                  <button\n                      type=\"button\"\n                      className=\"btn btn-secondary btn-sm btn-rounded\"\n                      onClick={() => onIncrement(counter)}\n                  >\n                      <span className=\"fa fa-plus\">Aumentar</span>\n                  </button>\n\n                  {/* m-3 is the marging */}\n                  <button\n                      type=\"button\"\n                      className=\"btn btn-secondary btn-sm m-3 btn-rounded\"\n                      onClick={() => onDecrement(counter)}\n                      disabled={counter.value === 0 ? \"disabled\" : \"\"}\n                  >\n                      <span className=\"fa fa-minus\">Diminuir</span>\n                  </button>\n\n                  <button\n                      type=\"button\"\n                      className=\"btn btn-danger btn-sm btn-rounded\"\n                      onClick={() => onDelete(counter.id)}\n                  >\n                      <span className=\"fa fa-trash\">Excluir</span>\n                  </button>\n              </div>\n          </div>\n      );\n  }\n\n  getBadgeClasses() {\n      let classes = \"badge m-2 bg-\";\n      classes += this.props.counter.value === 0 ? \"danger\" : \"success\";\n      return classes;\n  }\n\n  formatCount() {\n      const { value } = this.props.counter;\n      return value;\n  }\n}\n\nexport default Counter;","import React from 'react';\nimport Counter from './counter';\n\nclass Counters extends React.Component {\n\n  constructor(props) {\n      super(props);\n      console.log(\"Counters constructor: props\", props);\n  }\n\n  render() {\n      const { counters, onReset, onDelete, onIncrement, onDecrement, onNovoContador } =\n          this.props;\n      return (\n          <div>\n              <button\n                  onClick={onReset}\n                  className=\"btn btn-sm m-2 btn-rounded btn-success\"\n              >\n                  Reseta Contadores\n              </button>\n              <button\n                  onClick={onNovoContador}\n                  className=\"btn btn-sm m-2 btn-rounded btn-success\"\n              >\n                  Adiciona Contador\n              </button>\n              {counters.map((counter) => (\n                  <Counter\n                      key={counter.id}\n                      onDelete={onDelete}\n                      onIncrement={onIncrement}\n                      onDecrement={onDecrement}\n                      counter={counter}\n                  >\n                      <h6>{counter.id})</h6>\n                  </Counter>\n              ))}\n          </div>\n      );\n  }\n}\n\nexport default Counters;","import React from 'react';\nimport './App.css';\nimport NavBar from './components/navbar';\nimport Counters from './components/counters';\n\n\nclass App extends React.Component {\n\n\n  ncounters = 1;\n\n\n  constructor(props) {\n\n    super(props);\n\n    console.log(\"App constructor: props\", this.props);\n\n\n    this.state = {\n\n      counters: Array.from({ length: this.ncounters }, (_, index) => ({\n\n        id: index + 1,\n\n        value: 0,\n\n      })),\n\n      maxId: this.ncounters,\n\n    };\n\n  }\n\n\n  handleIncrement = (counter) => {\n\n    console.log(\"Increment\", counter);\n\n    const counters = [...this.state.counters];\n\n    const index = counters.indexOf(counter);\n\n\n    counters[index] = { ...counter };\n\n    counters[index].value++;\n\n\n    this.setState({ counters });\n\n  };\n\n\n  handleDecrement = (counter) => {\n\n    console.log(\"Decrement\", counter);\n\n    const counters = [...this.state.counters];\n\n    const index = counters.indexOf(counter);\n\n    counters[index] = { ...counter };\n\n    counters[index].value--;\n\n    this.setState({ counters });\n\n  };\n\n\n  handleReset = () => {\n\n    const counters = this.state.counters.map((c) => {\n\n      c.value = 0;\n\n      return c;\n\n    });\n\n    this.setState({ counters });\n\n  };\n\n\n  handleDelete = (counterId) => {\n\n    console.log(\"Event Handler Called\", counterId);\n\n    const counters = this.state.counters.filter((c) => c.id !== counterId);\n\n    this.setState({ counters });\n\n  };\n\n  handleNewCounter = () => {\n\n    const maxId = this.state.maxId + 1;\n\n    const counters = this.state.counters;\n\n    counters.push({\n\n      id: maxId,\n\n      value: 0,\n\n    });\n\n    this.setState({ counters, maxId });\n\n  };\n\n  render() {\n\n    return (\n\n      <React.Fragment>\n\n        <NavBar\n\n          totalCounters={this.state.counters.filter((c) => c.value > 0).length}\n\n        />\n\n        <main role=\"main\" className=\"container-fluid bg-antique\">\n\n          <div className=\"counters\">\n\n            <Counters\n\n              counters={this.state.counters}\n\n              onReset={this.handleReset}\n\n              onIncrement={this.handleIncrement}\n\n              onDecrement={this.handleDecrement}\n\n              onDelete={this.handleDelete}\n\n              onNovoContador={this.handleNewCounter}\n\n            />\n\n          </div>\n\n        </main>\n\n      </React.Fragment>\n\n    );\n\n  }\n\n}\n\ndocument.getElementsByTagName(\"BODY\")[0].classList.add(\"dark\");\n\nexport default App;","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n      // [::1] is the IPv6 localhost address.\n      window.location.hostname === '[::1]' ||\n      // 127.0.0.1/8 is considered localhost for IPv4.\n      window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n      )\n  );\n  \n  export default function register() {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n      // The URL constructor is available in all browsers that support SW.\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n      if (publicUrl.origin !== window.location.origin) {\n        // Our service worker won't work if PUBLIC_URL is on a different origin\n        // from what our page is served on. This might happen if a CDN is used to\n        // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n        return;\n      }\n  \n      window.addEventListener('load', () => {\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n  \n        if (isLocalhost) {\n          // This is running on localhost. Lets check if a service worker still exists or not.\n          checkValidServiceWorker(swUrl);\n  \n          // Add some additional logging to localhost, pointing developers to the\n          // service worker/PWA documentation.\n          navigator.serviceWorker.ready.then(() => {\n            console.log(\n              'This web app is being served cache-first by a service ' +\n                'worker. To learn more, visit https://goo.gl/SC7cgQ'\n            );\n          });\n        } else {\n          // Is not local host. Just register service worker\n          registerValidSW(swUrl);\n        }\n      });\n    }\n  }\n  \n  function registerValidSW(swUrl) {\n    navigator.serviceWorker\n      .register(swUrl)\n      .then(registration => {\n        registration.onupdatefound = () => {\n          const installingWorker = registration.installing;\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in your web app.\n                console.log('New content is available; please refresh.');\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                console.log('Content is cached for offline use.');\n              }\n            }\n          };\n        };\n      })\n      .catch(error => {\n        console.error('Error during service worker registration:', error);\n      });\n  }\n  \n  function checkValidServiceWorker(swUrl) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        if (\n          response.status === 404 ||\n          response.headers.get('content-type').indexOf('javascript') === -1\n        ) {\n          // No service worker found. Probably a different app. Reload the page.\n          navigator.serviceWorker.ready.then(registration => {\n            registration.unregister().then(() => {\n              window.location.reload();\n            });\n          });\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl);\n        }\n      })\n      .catch(() => {\n        console.log(\n          'No internet connection found. App is running in offline mode.'\n        );\n      });\n  }\n  \n  export function unregister() {\n    if ('serviceWorker' in navigator) {\n      navigator.serviceWorker.ready.then(registration => {\n        registration.unregister();\n      });\n    }\n  }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();"],"sourceRoot":""}